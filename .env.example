# Copy this file to .env and update with your settings

# ========================
# AMPLIFIER DIRECTORY CONFIGURATION
# ========================

# Main data directory for processed/generated data
# Supports: relative paths (./data), absolute (/var/data), home paths (~/data)
# Default: .data (in repo, git-ignored)
AMPLIFIER_DATA_DIR=.data

# Content source directories (comma-separated list)
# These directories will be scanned for content to process
# Supports: relative, absolute, and home paths
# Default: .data/content (in repo, git-ignored)
AMPLIFIER_CONTENT_DIRS=.data/content

# =============================================================================
# Backend Selection (Claude Code vs Codex)
# =============================================================================

# Choose which AI backend to use: "claude" or "codex"
# - "claude": Use Claude Code (VS Code extension) with native hooks
# - "codex": Use Codex CLI with MCP servers
# Default: claude (if not set)
AMPLIFIER_BACKEND=claude

# Codex-specific configuration
# Profile to use when starting Codex (development, ci, review)
CODEX_PROFILE=development

# Session context for Codex initialization
# Used by .codex/tools/session_init.py to load relevant memories
CODEX_SESSION_CONTEXT="Working on project features"

# Session ID for cleanup (usually set automatically by wrapper)
CODEX_SESSION_ID=

# Usage with different backends:
#
# Claude Code (default):
#   export AMPLIFIER_BACKEND=claude
#   claude  # Start Claude Code normally
#
# Codex:
#   export AMPLIFIER_BACKEND=codex
#   ./amplify-codex.sh  # Use Codex wrapper
#
# Or use the unified CLI (when implemented):
#   ./amplify.py --backend codex

# ========================
# MODEL CONFIGURATION
# ========================

# Amplifier model categories (used across the system)
# Fast model for quick operations and smoke tests
AMPLIFIER_MODEL_FAST=claude-3-5-haiku-20241022

# Default model for standard operations
AMPLIFIER_MODEL_DEFAULT=claude-sonnet-4-20250514

# Thinking model for complex reasoning tasks
AMPLIFIER_MODEL_THINKING=claude-opus-4-1-20250805

# Legacy model configuration (being phased out)
# Fast model for document classification (Haiku is efficient)
KNOWLEDGE_MINING_MODEL=claude-3-5-haiku-20241022

# Powerful model for knowledge extraction (Sonnet for depth)
KNOWLEDGE_MINING_EXTRACTION_MODEL=claude-sonnet-4-20250514

# ========================
# CONTENT PROCESSING
# ========================

# Maximum characters to process from a document (~8000 words)
KNOWLEDGE_MINING_MAX_CHARS=50000

# Characters to use for document classification (fast preview)
KNOWLEDGE_MINING_CLASSIFICATION_CHARS=1500

# ========================
# STORAGE CONFIGURATION
# ========================

# Default document type when classification fails
# Options: article, api_docs, meeting, blog, tutorial, research,
#          changelog, readme, specification, conversation,
#          code_review, post_mortem, general
KNOWLEDGE_MINING_DEFAULT_DOC_TYPE=general

# ========================
# OPTIONAL CONFIGURATION
# ========================

# API Keys (optional - Claude Code SDK may provide these)
# ANTHROPIC_API_KEY=your_api_key_here
# OPENAI_API_KEY=your_openai_api_key_here

# Enable debug output
DEBUG=false

# ========================
# MEMORY SYSTEM
# ========================

# Enable/disable the memory extraction system (works with both Claude Code hooks and Codex MCP servers)
# - Claude Code: Uses native hooks for automatic session management
# - Codex: Uses MCP servers for manual tool invocation
# Set to true/1/yes to enable, false/0/no or unset to disable
MEMORY_SYSTEM_ENABLED=false

# Model for memory extraction (fast, efficient model recommended)
MEMORY_EXTRACTION_MODEL=claude-3-5-haiku-20241022

# Memory extraction timeout in seconds
MEMORY_EXTRACTION_TIMEOUT=120

# Maximum messages to process for extraction
MEMORY_EXTRACTION_MAX_MESSAGES=20

# Maximum content length per message
MEMORY_EXTRACTION_MAX_CONTENT_LENGTH=500

# Maximum memories to extract per session
MEMORY_EXTRACTION_MAX_MEMORIES=10

# Directory for storing memories
MEMORY_STORAGE_DIR=.data/memories

# ========================
# SMOKE TEST CONFIGURATION
# ========================

# Model category to use for smoke tests (fast/default/thinking)
SMOKE_TEST_MODEL_CATEGORY=fast

# Skip tests when AI is unavailable instead of failing
SMOKE_TEST_SKIP_ON_AI_UNAVAILABLE=true

# AI evaluation timeout in seconds
SMOKE_TEST_AI_TIMEOUT=30

# Maximum characters to send to AI for evaluation
SMOKE_TEST_MAX_OUTPUT_CHARS=5000

# Test data directory (automatically cleaned up)
SMOKE_TEST_TEST_DATA_DIR=.smoke_test_data
